/*
 * Client side logic for the Uttar Pradesh news dashboard.  This script
 * fetches the pre‑compiled JSON data file produced by fetch_news.py and
 * renders it into a list of cards.  Users can filter by date range
 * and category or view the top 50 stories published today.
 */

document.addEventListener('DOMContentLoaded', () => {
  let stories = [];
  // Load the JSON data file.  The path assumes this script sits beside
  // a `data` directory containing `news.json` generated by fetch_news.py.
  fetch('data/news.json')
    .then(response => {
      if (!response.ok) {
        throw new Error('Failed to load news data');
      }
      return response.json();
    })
    .then(data => {
      stories = data;
      initialiseFilters();
      // Display an initial set of stories.  Limit to 60 entries to
      // avoid overwhelming the user.  The default view shows the most
      // recent stories.
      render(stories.slice(0, 60));
    })
    .catch(err => {
      const container = document.getElementById('news-container');
      container.innerHTML = `<p>Error loading news: ${err.message}</p>`;
    });

  function initialiseFilters() {
    const startInput = document.getElementById('start-date');
    const endInput = document.getElementById('end-date');
    const categorySelect = document.getElementById('category');
    const todayBtn = document.getElementById('today-btn');
    const resetBtn = document.getElementById('reset-btn');

    startInput.addEventListener('change', applyFilters);
    endInput.addEventListener('change', applyFilters);
    categorySelect.addEventListener('change', applyFilters);
    todayBtn.addEventListener('click', () => {
      // Determine today's date in YYYY‑MM‑DD format in the user's
      // local timezone.  Stories are stored in UTC ISO format but
      // begin with the date portion.
      const now = new Date();
      const yyyy = now.getFullYear();
      const mm = String(now.getMonth() + 1).padStart(2, '0');
      const dd = String(now.getDate()).padStart(2, '0');
      const todayStr = `${yyyy}-${mm}-${dd}`;
      const todayStories = stories.filter(s => s.pubDate.startsWith(todayStr));
      render(todayStories.slice(0, 50));
    });
    resetBtn.addEventListener('click', () => {
      startInput.value = '';
      endInput.value = '';
      categorySelect.value = 'All';
      render(stories.slice(0, 60));
    });
  }

  function applyFilters() {
    const startDate = document.getElementById('start-date').value;
    const endDate = document.getElementById('end-date').value;
    const category = document.getElementById('category').value;
    let filtered = stories;
    if (startDate) {
      // Compare the date portion only.  Since stories are stored in
      // ISO‑8601 format (YYYY‑MM‑DDThh:mm:ss), string comparison on
      // the prefix suffices.
      filtered = filtered.filter(s => s.pubDate >= startDate);
    }
    if (endDate) {
      // To include the entire end date, add one day and filter for
      // pubDate less than the next day.  Convert to a Date object to
      // compute the next day.
      const end = new Date(endDate);
      end.setDate(end.getDate() + 1);
      const isoNext = end.toISOString().split('T')[0];
      filtered = filtered.filter(s => s.pubDate < isoNext);
    }
    if (category && category !== 'All') {
      filtered = filtered.filter(s => s.category === category);
    }
    // Limit the result set to avoid extremely long lists.
    render(filtered.slice(0, 60));
  }

  function render(list) {
    const container = document.getElementById('news-container');
    container.innerHTML = '';
    if (list.length === 0) {
      container.innerHTML = '<p>No news articles match the selected filters.</p>';
      return;
    }
    list.forEach(item => {
      const card = document.createElement('div');
      card.className = 'news-card';
      const dateObj = new Date(item.pubDate);
      const localDateString = dateObj.toLocaleString(undefined, {
        year: 'numeric', month: 'short', day: 'numeric',
        hour: '2-digit', minute: '2-digit'
      });
      card.innerHTML = `
        <h3><a href="${item.link}" target="_blank" rel="noopener noreferrer">${item.title}</a></h3>
        <div class="meta">${localDateString} • ${item.category} • ${item.source}</div>
        <p>${item.summary}</p>
      `;
      container.appendChild(card);
    });
  }
});